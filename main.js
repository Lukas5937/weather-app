!function(){const e=document.querySelector("#unit"),t=document.querySelector("label[for='unit']"),n=document.querySelector(".temperature-wrapper"),o=document.querySelector(".loader-wrapper");function c(){let t="Celsius";return t=e.checked?"Fahrenheit":"Celsius",t}async function r(){let e=document.querySelector("#city").value;try{const t=await fetch(`http://api.weatherapi.com/v1/current.json?key=58b771819ace42c288b24449233112&q=${e}&aqi=no`,{mode:"cors"});if(!t.ok)throw new Error("Please enter a valid City name.");const n=await t.json();e=n.location.name;const o=n.location.country,r=c();let a=n.current.temp_c;return"Fahrenheit"===r&&(a=n.current.temp_f),{city:e,countryName:o,temp:a}}catch(e){console.error(e.message)}}e.addEventListener("click",(()=>{const e=c();t.textContent=e})),document.querySelector("form").addEventListener("submit",(e=>{(async function(e){!function(){const e=document.createElement("img");e.src="https://img.freepik.com/premium-vector/processing-icon-circular-loader-loading-progress-indicator-isolated-white-background_543062-380.jpg?w=2000",e.style.height="50px",e.style.width="50px",o.append(e)}();const t=await e();!function(){const e=document.querySelector("img");o.removeChild(e)}();let r="째C";"Fahrenheit"===c()&&(r="째F");const a=document.createElement("p"),u=document.createElement("p"),i=document.createElement("p");a.textContent=`${t.temp} ${r}`,u.textContent=t.city,i.textContent=t.countryName,n.append(a,u,i),function(e,t){console.log(e),console.log(t),("째C"===e||"째F"===e)&&(t<10?n.style.background="blue":t<20?n.style.background="green":t<30?n.style.background="orange":t>=30&&(n.style.background="red"))}(r,t.temp)})(r),e.preventDefault()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiWUFBQSxNQUFNQSxFQUFlQyxTQUFTQyxjQUFjLFNBQ3RDQyxFQUFvQkYsU0FBU0MsY0FBYyxxQkFDM0NFLEVBQXFCSCxTQUFTQyxjQUFjLHdCQUM1Q0csRUFBZ0JKLFNBQVNDLGNBQWMsbUJBRTdDLFNBQVNJLElBQ1AsSUFBSUMsRUFBTyxVQUlYLE9BRkVBLEVBREVQLEVBQWFRLFFBQ1IsYUFDSyxVQUNQRCxDQUNULENBT0FFLGVBQWVDLElBQ2IsSUFBSUMsRUFBT1YsU0FBU0MsY0FBYyxTQUFTVSxNQUMzQyxJQUNFLE1BQU1DLFFBQWlCQyxNQUNwQixrRkFBaUZILFdBQ2xGLENBQUVJLEtBQU0sU0FFVixJQUFLRixFQUFTRyxHQUNaLE1BQU0sSUFBSUMsTUFBTSxtQ0FFbEIsTUFBTUMsUUFBYUwsRUFBU00sT0FDNUJSLEVBQU9PLEVBQUtFLFNBQVNDLEtBQ3JCLE1BQU1DLEVBQWNKLEVBQUtFLFNBQVNHLFFBQzVCaEIsRUFBT0QsSUFDYixJQUFJa0IsRUFBT04sRUFBS08sUUFBUUMsT0FJeEIsTUFIYSxlQUFUbkIsSUFDRmlCLEVBQU9OLEVBQUtPLFFBQVFFLFFBRWYsQ0FBRWhCLE9BQU1XLGNBQWFFLE9BQzlCLENBQUUsTUFBT0ksR0FDUEMsUUFBUUQsTUFBTUEsRUFBTUUsUUFDdEIsQ0FDRixDQTNCQTlCLEVBQWErQixpQkFBaUIsU0FBUyxLQUNyQyxNQUFNeEIsRUFBT0QsSUFDYkgsRUFBa0I2QixZQUFjekIsQ0FBSSxJQXNGekJOLFNBQVNDLGNBQWMsUUFDL0I2QixpQkFBaUIsVUFBV0UsS0FwQmpDeEIsZUFBK0J5QixJQWQvQixXQUNFLE1BQU1DLEVBQVlsQyxTQUFTbUMsY0FBYyxPQUN6Q0QsRUFBVUUsSUFDUixvSkFDRkYsRUFBVUcsTUFBTUMsT0FBUyxPQUN6QkosRUFBVUcsTUFBTUUsTUFBUSxPQUN4Qm5DLEVBQWNvQyxPQUFPTixFQUN2QixDQVFFTyxHQUNBLE1BQU1DLFFBQW9CVCxLQVA1QixXQUNFLE1BQU1DLEVBQVlsQyxTQUFTQyxjQUFjLE9BQ3pDRyxFQUFjdUMsWUFBWVQsRUFDNUIsQ0FLRVUsR0FFQSxJQUFJQyxFQUFXLEtBQ0YsZUFGQXhDLE1BR1h3QyxFQUFXLE1BRWIsTUFBTXRCLEVBQU92QixTQUFTbUMsY0FBYyxLQUM5QnpCLEVBQU9WLFNBQVNtQyxjQUFjLEtBQzlCYixFQUFVdEIsU0FBU21DLGNBQWMsS0FDdkNaLEVBQUtRLFlBQWUsR0FBRVcsRUFBWW5CLFFBQVFzQixJQUMxQ25DLEVBQUtxQixZQUFjVyxFQUFZaEMsS0FDL0JZLEVBQVFTLFlBQWNXLEVBQVlyQixZQUNsQ2xCLEVBQW1CcUMsT0FBT2pCLEVBQU1iLEVBQU1ZLEdBdkR4QyxTQUErQnVCLEVBQVV0QixHQUN2Q0ssUUFBUWtCLElBQUlELEdBQ1pqQixRQUFRa0IsSUFBSXZCLElBQ0ssT0FBYnNCLEdBVW9CLE9BQWJBLEtBVEx0QixFQUFPLEdBQ1RwQixFQUFtQmtDLE1BQU1VLFdBQWEsT0FDN0J4QixFQUFPLEdBQ2hCcEIsRUFBbUJrQyxNQUFNVSxXQUFhLFFBQzdCeEIsRUFBTyxHQUNoQnBCLEVBQW1Ca0MsTUFBTVUsV0FBYSxTQUM3QnhCLEdBQVEsS0FDakJwQixFQUFtQmtDLE1BQU1VLFdBQWEsT0FhNUMsQ0FnQ0VDLENBQXNCSCxFQUFVSCxFQUFZbkIsS0FDOUMsRUFJRTBCLENBQWdCeEMsR0FDaEJ1QixFQUFNa0IsZ0JBQWdCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFuZGFyZC10ZW1wbGF0ZS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1bml0Q2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3VuaXRcIik7XG5jb25zdCB1bml0Q2hlY2tib3hMYWJlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJsYWJlbFtmb3I9J3VuaXQnXVwiKTtcbmNvbnN0IHRlbXBlcmF0dXJlV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGVtcGVyYXR1cmUtd3JhcHBlclwiKTtcbmNvbnN0IGxvYWRlcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRlci13cmFwcGVyXCIpO1xuXG5mdW5jdGlvbiBjaGVja1VuaXQoKSB7XG4gIGxldCB1bml0ID0gXCJDZWxzaXVzXCI7XG4gIGlmICh1bml0Q2hlY2tib3guY2hlY2tlZCkge1xuICAgIHVuaXQgPSBcIkZhaHJlbmhlaXRcIjtcbiAgfSBlbHNlIHVuaXQgPSBcIkNlbHNpdXNcIjtcbiAgcmV0dXJuIHVuaXQ7XG59XG5cbnVuaXRDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjb25zdCB1bml0ID0gY2hlY2tVbml0KCk7XG4gIHVuaXRDaGVja2JveExhYmVsLnRleHRDb250ZW50ID0gdW5pdDtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVyRGF0YSgpIHtcbiAgbGV0IGNpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NpdHlcIikudmFsdWU7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGBodHRwOi8vYXBpLndlYXRoZXJhcGkuY29tL3YxL2N1cnJlbnQuanNvbj9rZXk9NThiNzcxODE5YWNlNDJjMjg4YjI0NDQ5MjMzMTEyJnE9JHtjaXR5fSZhcWk9bm9gLFxuICAgICAgeyBtb2RlOiBcImNvcnNcIiB9LFxuICAgICk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgQ2l0eSBuYW1lLlwiKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjaXR5ID0gZGF0YS5sb2NhdGlvbi5uYW1lO1xuICAgIGNvbnN0IGNvdW50cnlOYW1lID0gZGF0YS5sb2NhdGlvbi5jb3VudHJ5O1xuICAgIGNvbnN0IHVuaXQgPSBjaGVja1VuaXQoKTtcbiAgICBsZXQgdGVtcCA9IGRhdGEuY3VycmVudC50ZW1wX2M7XG4gICAgaWYgKHVuaXQgPT09IFwiRmFocmVuaGVpdFwiKSB7XG4gICAgICB0ZW1wID0gZGF0YS5jdXJyZW50LnRlbXBfZjtcbiAgICB9XG4gICAgcmV0dXJuIHsgY2l0eSwgY291bnRyeU5hbWUsIHRlbXAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkanVzdEJhY2tncm91bmRDb2xvcih1bml0VGV4dCwgdGVtcCkge1xuICBjb25zb2xlLmxvZyh1bml0VGV4dCk7XG4gIGNvbnNvbGUubG9nKHRlbXApO1xuICBpZiAodW5pdFRleHQgPT09IFwiwrBDXCIpIHtcbiAgICBpZiAodGVtcCA8IDEwKSB7XG4gICAgICB0ZW1wZXJhdHVyZVdyYXBwZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwiYmx1ZVwiO1xuICAgIH0gZWxzZSBpZiAodGVtcCA8IDIwKSB7XG4gICAgICB0ZW1wZXJhdHVyZVdyYXBwZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwiZ3JlZW5cIjtcbiAgICB9IGVsc2UgaWYgKHRlbXAgPCAzMCkge1xuICAgICAgdGVtcGVyYXR1cmVXcmFwcGVyLnN0eWxlLmJhY2tncm91bmQgPSBcIm9yYW5nZVwiO1xuICAgIH0gZWxzZSBpZiAodGVtcCA+PSAzMCkge1xuICAgICAgdGVtcGVyYXR1cmVXcmFwcGVyLnN0eWxlLmJhY2tncm91bmQgPSBcInJlZFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh1bml0VGV4dCA9PT0gXCLCsEZcIikge1xuICAgIGlmICh0ZW1wIDwgMTApIHtcbiAgICAgIHRlbXBlcmF0dXJlV3JhcHBlci5zdHlsZS5iYWNrZ3JvdW5kID0gXCJibHVlXCI7XG4gICAgfSBlbHNlIGlmICh0ZW1wIDwgMjApIHtcbiAgICAgIHRlbXBlcmF0dXJlV3JhcHBlci5zdHlsZS5iYWNrZ3JvdW5kID0gXCJncmVlblwiO1xuICAgIH0gZWxzZSBpZiAodGVtcCA8IDMwKSB7XG4gICAgICB0ZW1wZXJhdHVyZVdyYXBwZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwib3JhbmdlXCI7XG4gICAgfSBlbHNlIGlmICh0ZW1wID49IDMwKSB7XG4gICAgICB0ZW1wZXJhdHVyZVdyYXBwZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwicmVkXCI7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNob3dMb2FkZXIoKSB7XG4gIGNvbnN0IGxvYWRlckltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gIGxvYWRlckltZy5zcmMgPVxuICAgIFwiaHR0cHM6Ly9pbWcuZnJlZXBpay5jb20vcHJlbWl1bS12ZWN0b3IvcHJvY2Vzc2luZy1pY29uLWNpcmN1bGFyLWxvYWRlci1sb2FkaW5nLXByb2dyZXNzLWluZGljYXRvci1pc29sYXRlZC13aGl0ZS1iYWNrZ3JvdW5kXzU0MzA2Mi0zODAuanBnP3c9MjAwMFwiO1xuICBsb2FkZXJJbWcuc3R5bGUuaGVpZ2h0ID0gXCI1MHB4XCI7XG4gIGxvYWRlckltZy5zdHlsZS53aWR0aCA9IFwiNTBweFwiO1xuICBsb2FkZXJXcmFwcGVyLmFwcGVuZChsb2FkZXJJbWcpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVMb2FkZXIoKSB7XG4gIGNvbnN0IGxvYWRlckltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gIGxvYWRlcldyYXBwZXIucmVtb3ZlQ2hpbGQobG9hZGVySW1nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2hvd1dlYXRoZXJEYXRhKGFwaUNhbGwpIHtcbiAgc2hvd0xvYWRlcigpO1xuICBjb25zdCB3ZWF0aGVyRGF0YSA9IGF3YWl0IGFwaUNhbGwoKTtcbiAgcmVtb3ZlTG9hZGVyKCk7XG4gIGNvbnN0IHVuaXQgPSBjaGVja1VuaXQoKTtcbiAgbGV0IHVuaXRUZXh0ID0gXCLCsENcIjtcbiAgaWYgKHVuaXQgPT09IFwiRmFocmVuaGVpdFwiKSB7XG4gICAgdW5pdFRleHQgPSBcIsKwRlwiO1xuICB9XG4gIGNvbnN0IHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgY2l0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBjb3VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIHRlbXAudGV4dENvbnRlbnQgPSBgJHt3ZWF0aGVyRGF0YS50ZW1wfSAke3VuaXRUZXh0fWA7XG4gIGNpdHkudGV4dENvbnRlbnQgPSB3ZWF0aGVyRGF0YS5jaXR5O1xuICBjb3VudHJ5LnRleHRDb250ZW50ID0gd2VhdGhlckRhdGEuY291bnRyeU5hbWU7XG4gIHRlbXBlcmF0dXJlV3JhcHBlci5hcHBlbmQodGVtcCwgY2l0eSwgY291bnRyeSk7XG4gIGFkanVzdEJhY2tncm91bmRDb2xvcih1bml0VGV4dCwgd2VhdGhlckRhdGEudGVtcCk7XG59XG5cbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZm9ybVwiKTtcbmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHtcbiAgc2hvd1dlYXRoZXJEYXRhKGdldFdlYXRoZXJEYXRhKTtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbn0pO1xuIl0sIm5hbWVzIjpbInVuaXRDaGVja2JveCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInVuaXRDaGVja2JveExhYmVsIiwidGVtcGVyYXR1cmVXcmFwcGVyIiwibG9hZGVyV3JhcHBlciIsImNoZWNrVW5pdCIsInVuaXQiLCJjaGVja2VkIiwiYXN5bmMiLCJnZXRXZWF0aGVyRGF0YSIsImNpdHkiLCJ2YWx1ZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtb2RlIiwib2siLCJFcnJvciIsImRhdGEiLCJqc29uIiwibG9jYXRpb24iLCJuYW1lIiwiY291bnRyeU5hbWUiLCJjb3VudHJ5IiwidGVtcCIsImN1cnJlbnQiLCJ0ZW1wX2MiLCJ0ZW1wX2YiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRleHRDb250ZW50IiwiZXZlbnQiLCJhcGlDYWxsIiwibG9hZGVySW1nIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInN0eWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJhcHBlbmQiLCJzaG93TG9hZGVyIiwid2VhdGhlckRhdGEiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUxvYWRlciIsInVuaXRUZXh0IiwibG9nIiwiYmFja2dyb3VuZCIsImFkanVzdEJhY2tncm91bmRDb2xvciIsInNob3dXZWF0aGVyRGF0YSIsInByZXZlbnREZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==